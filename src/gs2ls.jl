module gs2ls
using NetCDF

export createInputFile

"""
GS2species: an encapsulation of data related to each species in a gs2 input file
"""
type GS2species
   z::Float64
   mass::Float64
   dens::Float64
   temp::Float64
   fprim::Float64
   tprim::Float64
   vnewk::Float64
   electron::Bool
end
SpeciesData(;mass=-1.0,z=-999.0,dens=-1.0,temp=-1.0,vnewk=-1.0,fprim=-999.0,tprim=-999.0,electron=false) =SpeciesData(z,mass,dens,temp,fprim,tprim,vnewk,electron)

"""
GS2resolution(ntheta,negrid,ngauss,delt,linear,kx,ky,nperiod,nx,ny,y0)
"""
type GS2resolution
   # Resolution parameters
   ntheta::Int64
   negrid::Int64
   ngauss::Int64
   delt::Float64
   linear::Bool
   kx::Float64
   ky::Float64
   nperiod::Int64
   nx::Int64
   ny::Int64
   y0::Float64
end
# Set defaults
GS2resolution(;ntheta=24,negrid=16,ngauss=8,delt=0.1,linear=true,kx=0.0,ky=0.5,nperiod=1,nx=-1,ny=64,y0=10.0) = GS2resolution(ntheta,negrid,ngauss,delt,linear,kx,ky,nperiod,nx,ny,y0)

"""
GS2params(runname,cpu_time,fapar,fbpar,beta,tite,fluxe,fluxemu,writephi)
"""
type GS2params
   # Simulation and diagnostic parameters
   runname::ASCIIString
   cpu_time::Float64
   fapar::Float64
   fbpar::Float64
   beta::Float64
   tite::Float64
   fluxe::Bool
   fluxemu::Bool
   writephi::Bool
end
GS2params(;runname="testcase",cpu_time=3600.0,fapar=0.0,fbpar=0.0,beta=-0.01,tite=1.0,fluxe=true,fluxemu=false,writephi=false) = GS2params(runname,cpu_time,fapar,fbpar,beta,tite,fluxe,fluxemu,writephi)

"""
GS2geometry(equilibrium_option,rhoc,irho,qinp,shat,akappa,kappri,tri,tripri,rmaj,r_geo)
"""
type GS2geometry
   # Geometry parameters
   equilibrium_option::ASCIIString
   rhoc::Float64
   irho::Int64
   qinp::Float64
   shat::Float64
   shift::Float64
   akappa::Float64
   akappri::Float64
   tri::Float64
   tripri::Float64
   rmaj::Float64
   r_geo::Float64

end
GS2geometry(;equilibrium_option="eik",rhoc="0.5",irho=2,qinp=1.0,shat=1.0,shift=0.0,akappa=0.0,kappri=0.0,tri=0.0,tripri=0.0,rmaj=3.0,r_geo=-1.0)=GS2geometry(equilibrium_option,rhoc,irho,qinp,shat,shift,akappa,kappri,tri,tripri,rmaj,r_geo)

   # internal logic: linear

   # required always: ntheta, p.rhoc, equilibrium_option,shat, qinp, ngauss, negrid, fapar, fbpar, delt, cpu_time, spec, runname, fluxe, fluxemu,writephi

   # optional parameters: beta, tite, ky, kx, nx,ny, y0, nperiod, irho, rmaj, akappa, akappri,tri,tripri

"""
writeNamelist(file::IOStream,namelist::ASCIIString,dict::Dict)

Takes a julia dictionary and string, and writes a fortran namelist to an already opened file.
"""
function writeNamelist(file::IOStream,namelist::ASCIIString,dict::Dict)
   write(file,"\n\n&"*namelist*"\n")
   for key in keys(dict)
      if typeof(dict[key]) == ASCIIString
         string = " "*key*"=\""*dict[key]*"\""
      elseif typeof(dict[key]) == Bool
         string = " "*key*"=."*string(dict[key])*"."
      else
         string = " "*key*"="*string(dict[key])
      end
      write(file,string*"\n")
   end
   write(file,"/")
end

"""
createInputFile(filename::ASCIIString,p::GS2params,r::GS2resolution,g::GS2geometry,spec::Array{GS2species,1})

Writes an individual GS2 input file base on provided data and internal logic
"""
function createInputFile(filename::ASCIIString,p::GS2params,r::GS2resolution,g::GS2geometry,spec::Array{GS2species,1})

   # Check for defaults
   if g.r_geo < 0.0               
      g.r_geo = g.rmaj
   end
   if r.nx < 0                               
      g.nx = g.ny
   end
   if abs(p.fapar) > 0.0 && p.beta < 0.0
      error("Must specify beta when fapar>0")
   end
   if p.equilibrium_option == "s-alpha" && p.beta < 0.0
      warn("shift set equal to zero because beta=0.0")
      beta = 0.0
   end
   if !r.linear
      # TODO: Add logic to guess nx based on given nperiod for nonlinear runs
      r.nperiod = 1
   end

   # Open file
   f = open(filename,"w")
   write(f,"! GS2 input file generated by gs2ls.jl\n")

   # Calculate derived quantities
   nspec = length(spec)
   for is in 1:nspec
      if spec[is].electron
         ne = spec[is].dens
      end
   end
   zeff = 0.0
   for is in 1:nspec
      if spec[is].electron
         ne = spec[is].dens
      else
         zeff = zeff + spec[is].z^2*spec[is]*dens
      end
   end
   zeff = zeff/ne

   if r.linear 
      grid_option = "single" 
      boundary_option="default" 
   else 
      grid_option = "box"
      boundary_option="linked"
   end


   eps = rhoc/rmaj
   epsl = 2.0/rmaj
   pk = epsl/qinp

   prestot_prime = -sum(spec[:].dens.*spec[:].temp.*(spec[:].fprim + spec[:].tprim))
   prestot = sum(spec[:].dens.*spec[:].temp)
   beta_prime = beta * prestot_prime/prestot

   if equilibrium_option == "s-alpha"
      g.shift = -g.qinp^2 * rmaj * beta_prime
   end

   totcharge = sum(spec[:].dens.*spec[:].z)
   totcharge_prim = sum(spec[:].dens.*spec[:].z.*spec[:].fprim)
   abs(totcharge) < 1.0e-3 || warn("Equilibrium quasineutrality not satisfied")
   abs(totcharge_prim) < 1.0e-3 || warn("Equilibrium quasineutrality gradient not satisfied")

  
   ######################################## 
   # parameters
   writeNamelist(f, "parameters", Dict("beta"=>p.beta,"zeff"=>zeff,"tite"=>p.tite))

   ######################################## 
   # kt_grids_knobs
   writeNamelist(f, "kt_grids_knobs", Dict("grid_option"=>grid_option))

   ######################################## 
   # kt_grids_single_parameters
   # kt_grids_box_parameters
   if r.linear 
      dict = Dict("aky"=>r.ky,"akx"=>r.kx,"theta0"=>0.0)
      writeNamelist(f, "kt_grids_single_parameters", dict)
   else
      jtwist = round(Int64,2.0*pi*g.shat)
      dict = Dict("nx"=>r.nx,"ny"=>r.ny,"jtwist"=>jtwist,"y0"=>r.y0,"x0"=>r.y0)
      writeNamelist(f, "kt_grids_box_parameters", dict)
   end

   ######################################## 
   # theta_grid_knobs
   writeNamelist(f, "theta_grid_knobs", Dict("equilibrium_option"=>equilibrium_option))

   ######################################## 
   # theta_grid_parameters
   # theta_grid_salpha_knobs
   # theta_grid_eik_knobs
   if equilibrium_option == "s-alpha"
      dict = Dict("ntheta"=>r.ntheta,"nperiod"=>r.nperiod,"shat"=>g.shat,"shift",g.shift,"eps"=>eps,"epsl"=>epsl,"pk",pk)
      writeNamelist(f, "theta_grid_parameters", dict)

      writeNamelist(f, "theta_grid_salpha_knobs", Dict("model_option"=>"s-alpha"))
   elseif equilibrium_option == "eik"

      dict = Dict("ntheta"=>r.ntheta,"nperiod"=>r.nperiod,"rhoc"=>g.rhoc,"qinp"=>g.qinp,"shat"=>g.shat,"shift",g.shift,"rmaj"=>g.rmaj,"r_geo"=>g.r_geo,"akappa"=>g.akappa,"akappri"=>g.akappri,"tri"=>g.tri,"tripri"=>g.tripri)
      writeNamelist(f, "theta_grid_parameters", dict)

      dict = Dict("iflux"=>0,"itor"=>1,"irho"=>g.irho,"local_eq"=>true,"bishop"=>4,"delrho"=>0.001,"s_hat_input"=>g.shat,"beta_prime_input"=>beta_prime)
      writeNamelist(f, "theta_grid_eik_knobs", dict)
   else
      error("equilibrium_option invalid")
      # TODO: Add numerical geom options
   end

   ######################################## 
   # le_grids_knobs
   writeNamelist(f, "le_grids_knobs", Dict("ngauss"=>r.ngauss,"negrid"=>r.negrid))

   ######################################## 
   # dist_fn_knobs
   writeNamelist(f, "dist_fn_knobs", Dict("boundary_option"=>boundary_option,"nonad_zero"=>true))

   ######################################## 
   # fields_knobs
   writeNamelist(f, "fields_knobs", Dict("field_option"=>"implicit"))

   ######################################## 
   # knobs
   # TODO: Guess timestep and cpu_time
   dict = Dict("fphi"=>1.0,"fapar"=>p.fapar,"fbpar"=>p.fbpar,"delt"=>r.delt,"nstep"=>1000000,"avail_cpu_time"=>p.cpu_time)
   writeNamelist(f, "knobs", dict)

   ######################################## 
   # reinit_knobs
   writeNamelist(f, "reinit_knobs", Dict("delt_adj"=>4.0,"delt_minimum"=>1.0e-8,"abort_rapid_time_step_change"=>true))

   ######################################## 
   # layouts_knobs
   writeNamelist(f, "layouts_knobs", Dict("layout"=>"xyles"))

   ######################################## 
   # collisions_knobs
   writeNamelist(f, "collisions_knobs", Dict("collision_model"=>"default"))

   ######################################## 
   # nonlinear_terms_knobs
   if linear
      writeNamelist(f, "nonlinear_terms_knobs", Dict("nonlinear_mode"=>"off","flow_mode"=>"off","cfl"=>0.5))
   else
      writeNamelist(f, "nonlinear_terms_knobs", Dict("nonlinear_mode"=>"on","flow_mode"=>"off","cfl"=>0.5))
   end

   ######################################## 
   # species_knobs
   # dist_fn_species_knobs
   writeNamelist(f, "species_knobs", Dict("nspec"=>nspec))

   for is in 1:nspec
      if spec[is].electron 
         spectype = "electron" 
      else
         spectype = "ion"
      end

      dict = Dict("z"=>spec[is].z,"mass"=>spec[is].mass,"dens"=>spec[is].dens,"temp"=>spec[is].temp,"fprim"=>spec[is].fprim,"tprim"=>spec[is].tprim,"vnewk"=>spec[is].vnewk,"type"=>spectype)
      writeNamelist(f, "species_parameters_"*string(is), dict)

      writeNamelist(f, "dist_fn_species_knobs_"*string(is), Dict("fexpr"=>0.45,"bakdif"=>0.05))
   end

   ######################################## 
   # init_g_knobs
   dict = Dict("phiinit"=>0.001,"restart_file",p.runname*".nc","ginit_option"=>"noise","restart_dir"=>"restartdir")
   writeNamelist(f, "init_g_knobs",dict)

   ######################################## 
   # gs2_diagnostics_knobs
   dict = Dict[]
   push!(dict,("write_flux_e"=>p.fluxe,"write_eflux"=>p.fluxe))
   push!(dict,("write_flux_emu"=>p.fluxemu))
   push!(dict,("print_flux_line",false))
   if linear
      push!(dict,("write_nl_flux",false))
      push!(dict,("print_line",true))
      push!(dict,("write_line",true))
      push!(dict,("write_omega",true))
      push!(dict,("write_omavg",true))
      push!(dict,("omegatol",0.0001))
      push!(dict,("save_for_restart",false))
   else
      push!(dict,("write_nl_flux",true))
      push!(dict,("print_line",false))
      push!(dict,("write_line",false))
      push!(dict,("write_omega",false))
      push!(dict,("write_omavg",false))
      push!(dict,("omegatol",-0.0001))
      push!(dict,("save_for_restart",true))
   end
   push!(dict,("write_hrate",false))
   push!(dict,("write_eigenfunc",true))
   push!(dict,("write_final_fields",true))
   push!(dict,("write_final_moments",true))
   push!(dict,("nsave",100))
   push!(dict,("nwrite",10))
   push!(dict,("navg",10))
   push!(dict,("omegainst",500.0))
   push!(dict,("write_phi_over_time",p.writephi))
   writeNamelist(f,"gs2_diagnostics_knobs",dict)

   # Close file
   close(f)
   
end

end
