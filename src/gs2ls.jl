module gs2ls
using NetCDF

export createInputFile

"""
GS2species: an encapsulation of data related to each species in a gs2 input file
"""
type GS2species
   z::Float64
   mass::Float64
   dens::Float64
   temp::Float64
   fprim::Float64
   tprim::Float64
   vnewk::Float64
   electron::Bool
end
SpeciesData(;mass=-1.0,z=-999.0,dens=-1.0,temp=-1.0,vnewk=-1.0,fprim=-999.0,tprim=-999.0,electron=false) =SpeciesData(z,mass,dens,temp,fprim,tprim,vnewk,electron)

"""
GS2params: data encapsulation of parameters in a gs2 input file. All the things that can change from run to run.
"""
type GS2params
   y0::Float64
   nx::Int64
   ny::Int64
   ntheta::Int64
   negrid::Int64
   ngauss::Int64
   delt::Float64

   zeff::Float64
   tite::Float64
   beta::Float64
   fapar::Float64
   fbpar::Float64
   nonlin::Bool

   millergeom::Bool

   akx::Float64
   aky::Float64
   pk::Float64
   qinp::Float64
   nperiod::Int64

   akappa::Float64
   akappri::Float64
   tri::Float64
   tripri::Float64
   shift::Float64
   shat::Float64
   s_hat_input::Float64
   beta_prime_input::Float64
   rmaj::Float64
   rhoc::Int64
   rmaj::Float64
   r_geo::Float64
   eps::Float64
   epsl::Float64
   irho::Int64

   avail_cpu_time=Float64
end

"""
writeNamelist(file::IOStream,namelist::ASCIIString,dict::Dict)

Takes a julia dictionary and string, and writes a fortran namelist to an already opened file.
"""
function writeNamelist(file::IOStream,namelist::ASCIIString,dict::Dict)
   write(file,"\n\n&"*namelist*"\n")
   for key in keys(dict)
      if typeof(dict[key]) == ASCIIString
         string = " "*key*"=\""*dict[key]*"\""
      elseif typeof(dict[key]) == Bool
         string = " "*key*"=."*string(dict[key])*"."
      else
         string = " "*key*"="*string(dict[key])
      end
      write(file,string*"\n")
   end
   write(file,"/")
end

"""
Writes an individual GS2 input file base on provided data and internal logic
"""
function createInputFile(filename::ASCIIString,p::GS2params,spec::Array{GS2species,1})
   f = open(filename,"w")

   write(f,"! GS2 input file generated by gs2ls.jl\n")

   # Calculate derived quantities
   nspec = length(spec)
   for is in 1:nspec
      if spec[is].electron
         ne = spec[is].dens
      end
   end
   zeff = 0.0
   for is in 1:nspec
      if spec[is].electron
         ne = spec[is].dens
      else
         zeff = zeff + spec[is].z^2*spec[is]*dens
      end
   end
   zeff = zeff/ne

   dict = Dict("beta"=>p.beta,"zeff"=>zeff,"tite"=>p.tite)
   writeNamelist(f, "parameters", dict)

   linear ? grid_option = "single" : grid_option = "box"

   dict = Dict("grid_option"=>grid_option)
   writeNamelist(f, "kt_grids_knobs", dict)

   if linear 
      dict = Dict("aky"=>p.ky,"akx"=>p.kx,"theta0"=>0.0)
      writeNamelist(f, "kt_grids_box_parameters", dict)
   else
      jtwist = round(Int64,2.0*pi*p.shat)
      dict = Dict("nx"=>p.nx,"ny"=>p.ny,"jtwist"=>jtwist,"y0"=>p.y0,"x0"=>p.x0)
      writeNamelist(f, "kt_grids_box_parameters", dict)
   end

   !linear ? p.nperiod = 1

   # TODO: Calculate beta_prime and shift

   if equilibrium_option == "s-alpha"
      dict = Dict("model_option"=>"default")
      writeNamelist(f, "theta_grid_salpha_knobs", dict)
      # TODO: Add circular geom options
   elseif equilibrium_option == "eik"
      dict = Dict("equilibrium_option"=>equilibrium_option)
      writeNamelist(f, "theta_grid_knobs", dict)

      dict = Dict("ntheta"=>p.ntheta,"nperiod"=>p.nperiod,"rhoc"=>p.rhoc,"qinp"=>p.qinp,"shat"=>p.shat,"rmaj"=>p.rmaj,"r_geo"=>p.r_geo,"akappa"=>p.akappa,"akappri"=>p.akappri,"tri"=>p.tri,"tripri"=>p.tripri)
      writeNamelist(f, "theta_grid_parameters", dict)

      dict = Dict("iflux"=>0,"itor"=>1,"irho"=>p.irho,"local_eq"=>true,"bishop"=>4,"delrho"=>0.001,"s_hat_input"=>p.shat)
      writeNamelist(f, "theta_grid_eik_knobs", dict)
   elseif equilibrium_option == "file"
      # TODO: Add numerical geom options
   end

   dict = Dict("ngauss"=>p.ngauss,"negrid"=>p.negrid)
   writeNamelist(f, "le_grids_knobs", dict)

   linear ? boundary_option="default" : boundary_option="linked"
  
   dict = Dict("boundary_option"=>boundary_option,"nonad_zero"=>true)
   writeNamelist(f, "dist_fn_knobs", dict)

   writeNamelist(f, "fields_knobs", Dict("field_option"=>"implicit"))

   # TODO: Guess timestep and cpu_time
   dict = Dict("fphi"=>1.0,"fapar"=>p.fapar,"fbpar"=>p.fbpar,"delt"=>p.delt,"nstep"=>1000000,"avail_cpu_time"=p.cpu_time)
   writeNamelist(f, "knobs", dict)

   writeNamelist(f, "reinit_knobs", Dict("delt_adj"=>4.0,"delt_minimum"=>1.0e-8,"abort_rapid_time_step_change"=>true))

   writeNamelist(f, "layouts_knobs", Dict("layout"=>"xyles"))

   writeNamelist(f, "collisions_knobs", Dict("collision_model"=>"default"))

   if linear
      writeNamelist(f, "nonlinear_terms_knobs", Dict("nonlinear_mode"=>"off","flow_mode"=>"off","cfl"=>0.5))
   else
      writeNamelist(f, "nonlinear_terms_knobs", Dict("nonlinear_mode"=>"on","flow_mode"=>"off","cfl"=>0.5))
   end

   writeNamelist(f, "species_knobs", Dict("nspec"=>nspec))

   for is in 1:nspec
      spec[is].electron ? spectype = "electron" : spectype = "ion"

      dict = Dict("z"=>spec[is].z,"mass"=>spec[is].mass,"dens"=>spec[is].dens,"temp"=>spec[is].temp,"fprim"=>spec[is].fprim,"tprim"=>spec[is].tprim,"vnewk"=>spec[is].vnewk,"type"=>spectype)
      writeNamelist(f, "species_parameters_"*string(is), dict)

      writeNamelist(f, "dist_fn_species_knobs_"*string(is), Dict("fexpr"=>0.45,"bakdif"=>0.05))
   end

   dict = Dict("phiinit"=>0.001,"restart_file",p.runname*".nc","ginit_option"=>"noise","restart_dir"=>"restartdir")
   writeNamelist(f, "init_g_knobs",dict)

   dict = Dict[]
   push!(dict,("write_flux_e"=>p.fluxe,"write_eflux"=>p.fluxe))
   push!(dict,("write_flux_emu"=>p.fluxemu))
   push!(dict,("print_flux_line",false))
   if linear
      push!(dict,("write_nl_flux",false))
      push!(dict,("print_line",true))
      push!(dict,("write_line",true))
      push!(dict,("write_omega",true))
      push!(dict,("write_omavg",true))
      push!(dict,("omegatol",0.0001))
      push!(dict,("save_for_restart",false))
   else
      push!(dict,("write_nl_flux",true))
      push!(dict,("print_line",false))
      push!(dict,("write_line",false))
      push!(dict,("write_omega",false))
      push!(dict,("write_omavg",false))
      push!(dict,("omegatol",-0.0001))
      push!(dict,("save_for_restart",true))
   end
   push!(dict,("write_hrate",false))
   push!(dict,("write_eigenfunc",true))
   push!(dict,("write_final_fields",true))
   push!(dict,("write_final_moments",true))
   push!(dict,("nsave",100))
   push!(dict,("nwrite",10))
   push!(dict,("navg",10))
   push!(dict,("omegainst",500.0))
   push!(dict,("write_phi_over_time",p.writephi))
   writeNamelist(f,"gs2_diagnostics_knobs",dict)

   # internal logic: linear

   # required always: ntheta, p.rhoc, equilibrium_option,shat, qinp, ngauss, negrid, fapar, fbpar, delt, cpu_time, spec, runname, fluxe, fluxemu,writephi

   # optional parameters: beta, tite, ky, kx, nx,ny, y0, nperiod, irho, rmaj, akappa, akappri,tri,tripri

   close(f)
   
end

end
